# Root Signature和Shader Reflection重构计划

## 问题分析

### 当前架构存在的问题

1. **资源绑定冲突问题**
   - VS和PS使用相同register绑定点(如都用b0)时，当前实现无法正确区分
   - Root Signature创建时按资源绑定顺序分配Root Parameter索引，容易出错
   - 缺乏Shader Visibility支持，导致性能浪费

2. **反射系统设计问题**
   - 当前的`MergeReflection`方法简单合并VS和PS反射，丢失了Stage信息
   - 无法区分不同Stage的相同绑定点资源
   - 缺乏按Stage管理资源的机制

3. **Root Signature管理问题**
   - Root Parameter索引分配不够灵活
   - 缺乏资源绑定时的安全检查机制
   - 无法充分利用D3D12的Shader Visibility优化

## Unity引擎解决方案分析

### 核心设计理念
Unity引擎通过**Per-Stage资源管理**解决资源绑定冲突：

1. **Stage分离**: 为每个Shader Stage维护独立的资源数组
2. **自动映射**: Root Signature自动为每个Stage的每种资源类型分配独立的Root Parameter
3. **智能绑定**: 通过Stage和资源类型组合键进行资源绑定

### 关键技术点
```cpp
// Unity的资源存储方式
TDescResArray  srvs[kD3D12ShaderCount];        // 按Stage分离的SRV数组
TSamplerArray  samplers[kD3D12ShaderCount];    // 按Stage分离的Sampler数组
TConstantArray constants[kD3D12ShaderCount];   // 按Stage分离的CBV数组

// Root Parameter索引映射
rootSig->indices[kD3DRootSigSlotCBV][stage] = rootParameterIndex;
```

## 重构设计方案

### 1. 新增Shader Stage抽象

```cpp
enum class ShaderStage : uint32_t {
    Vertex = 0,
    Pixel = 1,
    Geometry = 2,
    Hull = 3,
    Domain = 4,
    Compute = 5,
    Count
};

// 转换函数
D3D12_SHADER_VISIBILITY ToD3D12ShaderVisibility(ShaderStage stage);
```

### 2. 重构ShaderReflection接口

```cpp
// 新增Stage资源信息结构
struct StageResourceInfo {
    ShaderStage stage;
    std::vector<ShaderRegisterBlock> registerBlocks;
    std::vector<ResourceBinding> resourceBindings;
    std::unordered_map<std::string, ShaderParameter> parameters;
};

// 扩展ShaderReflection接口
class ShaderReflection {
public:
    // 新接口：按Stage获取资源
    virtual std::vector<StageResourceInfo> ReflectStageResources() = 0;
    virtual StageResourceInfo* GetStageResources(ShaderStage stage) = 0;
    
    // 保留原有接口兼容性
    virtual BufferLayout ReflectVertexInputLayout() = 0;
    virtual std::vector<ShaderRegisterBlock> ReflectRegisterBlocks() = 0;
    virtual std::vector<ResourceBinding> ReflectResourceBindings() = 0;
};
```

### 3. 重构D3D12ShaderReflection实现

```cpp
class D3D12ShaderReflection : public ShaderReflection {
public:
    // 新方法：添加特定Stage的反射数据
    void AddStageReflection(ShaderStage stage, ComPtr<ID3D12ShaderReflection> stageReflection);
    
    // 实现新接口
    std::vector<StageResourceInfo> ReflectStageResources() override;
    StageResourceInfo* GetStageResources(ShaderStage stage) override;

private:
    // 按Stage存储反射数据
    std::array<StageResourceInfo, static_cast<size_t>(ShaderStage::Count)> m_StageResources;
    
    // 移除MergeReflection方法，改用AddStageReflection
};
```

### 4. 重构D3D12Shader实现

```cpp
class D3D12Shader : public Shader {
private:
    void CreateReflection() {
        auto reflection = CreateRef<D3D12ShaderReflection>();
        
        // 分别处理VS和PS反射
        if (m_VsByteCode) {
            ComPtr<ID3D12ShaderReflection> vsReflection;
            // 创建VS反射...
            reflection->AddStageReflection(ShaderStage::Vertex, vsReflection);
        }
        
        if (m_PsByteCode) {
            ComPtr<ID3D12ShaderReflection> psReflection;
            // 创建PS反射...
            reflection->AddStageReflection(ShaderStage::Pixel, psReflection);
        }
        
        m_Reflection = reflection;
    }
};
```

### 5. 重构GraphicsPipeline的Root Signature创建

```cpp
class D3D12GraphicsPipeline {
public:
    // 新增接口：获取特定Stage资源类型的Root Parameter索引
    uint32_t GetRootParameterIndex(ShaderStage stage, ResourceType type) const;
    
    // 便捷绑定接口
    void BindConstantBuffer(ID3D12GraphicsCommandList* cmdList, ShaderStage stage, 
                           D3D12_GPU_DESCRIPTOR_HANDLE handle) const;
    void BindTexture(ID3D12GraphicsCommandList* cmdList, ShaderStage stage,
                    D3D12_GPU_DESCRIPTOR_HANDLE handle) const;

private:
    void CreateRootSignature() {
        // 按资源类型×Stage的顺序创建Root Parameters
        // 每个组合分配独立的Root Parameter索引
        // 设置正确的Shader Visibility
    }
    
    // 存储Stage×ResourceType到Root Parameter索引的映射
    std::array<std::array<uint32_t, 4>, static_cast<size_t>(ShaderStage::Count)> m_StageRootIndices;
};
```

## 重构步骤计划

### Phase 1: 基础结构重构
1. 新增ShaderStage枚举和转换函数
2. 扩展ShaderReflection接口，添加Stage相关方法
3. 保持向后兼容性，不破坏现有代码

### Phase 2: D3D12ShaderReflection重构
1. 移除MergeReflection方法
2. 实现AddStageReflection方法
3. 实现新的Stage-based接口
4. 重构内部数据存储结构

### Phase 3: D3D12Shader重构
1. 修改CreateReflection方法
2. 分别处理不同Stage的反射创建
3. 确保反射数据正确分类

### Phase 4: GraphicsPipeline重构
1. 重构CreateRootSignature方法
2. 实现Stage-based的Root Parameter分配
3. 添加资源绑定便捷接口
4. 实现索引映射系统

### Phase 5: 测试和优化
1. 创建测试用例验证VS/PS相同绑定点的场景
2. 性能测试，验证Shader Visibility优化效果
3. 代码清理和文档更新

## 预期效果

1. **解决资源冲突**: VS和PS可以安全使用相同的register绑定点
2. **性能提升**: 充分利用Shader Visibility减少不必要的资源绑定
3. **代码简化**: 开发者无需手动管理不同Stage的register冲突
4. **扩展性**: 易于支持更多Shader Stage类型
5. **兼容性**: 保持现有API的向后兼容性

## 风险评估

1. **接口变更**: 新增接口可能需要更新依赖代码
2. **复杂度增加**: Stage-based管理会增加代码复杂度
3. **调试难度**: 多Stage资源管理可能增加调试难度

## 缓解措施

1. 保持向后兼容性，渐进式重构
2. 完善文档和示例代码
3. 增加详细的错误检查和日志
4. 提供便捷的调试工具和接口

## 现有代码详细分析

### Shader.h 分析

**当前实现优点：**
- 接口设计清晰，职责分离良好
- 提供了基本的反射接口 `GetReflection()`
- 包含了必要的着色器操作方法

**存在问题：**
- 参数设置接口缺乏Stage概念，无法区分VS/PS参数
- 没有提供Stage-specific的资源绑定接口
- 反射接口过于简单，不支持多Stage查询

**重构建议：**
```cpp
// 在Shader.h中新增
enum class ShaderStage : uint32_t {
    Vertex = 0, Pixel = 1, Geometry = 2, Hull = 3, Domain = 4, Compute = 5, Count
};

class Shader {
public:
    // 新增：Stage-aware参数设置
    virtual void SetStageInt(ShaderStage stage, const std::string& name, int value) = 0;
    virtual void SetStageFloat(ShaderStage stage, const std::string& name, float value) = 0;
    // ... 其他Stage-aware接口
    
    // 保留向后兼容性
    virtual void SetInt(const std::string& name, int value) = 0; // 内部转发到所有stage
    
    // 新增：Stage-specific反射查询
    virtual Ref<StageResourceInfo> GetStageReflection(ShaderStage stage) const = 0;
    virtual bool HasStage(ShaderStage stage) const = 0;
};
```

### D3D12Shader.h 分析

**当前实现问题：**
1. `MergeReflection` 设计缺陷：简单合并VS/PS反射，丢失Stage信息
2. 无法处理相同绑定点的资源冲突
3. `CreateReflection` 方法过于简化

**重构方案：**
```cpp
class D3D12ShaderReflection : public ShaderReflection {
public:
    // 移除MergeReflection，改用AddStageReflection
    void AddStageReflection(ShaderStage stage, ComPtr<ID3D12ShaderReflection> stageReflection);
    
    // 新增Stage-based接口
    std::vector<StageResourceInfo> ReflectStageResources() override;
    StageResourceInfo* GetStageResources(ShaderStage stage) override;
    
    // 新增：检查Stage是否存在
    bool HasStage(ShaderStage stage) const;

private:
    // 按Stage存储反射数据
    std::array<std::unique_ptr<StageResourceInfo>, static_cast<size_t>(ShaderStage::Count)> m_StageResources;
    std::array<ComPtr<ID3D12ShaderReflection>, static_cast<size_t>(ShaderStage::Count)> m_D3D12Reflections;
    
    // 移除旧的合并方式
    // void MergeReflection(...); // 删除此方法
};

class D3D12Shader : public Shader {
private:
    void CreateReflection() {
        auto reflection = CreateRef<D3D12ShaderReflection>();
        
        // 分别处理每个Stage
        if (m_VsByteCode) {
            ComPtr<ID3D12ShaderReflection> vsReflection;
            HRESULT hr = D3DReflect(
                m_VsByteCode->GetBufferPointer(),
                m_VsByteCode->GetBufferSize(),
                IID_PPV_ARGS(&vsReflection)
            );
            if (SUCCEEDED(hr)) {
                reflection->AddStageReflection(ShaderStage::Vertex, vsReflection);
            }
        }
        
        if (m_PsByteCode) {
            ComPtr<ID3D12ShaderReflection> psReflection;
            HRESULT hr = D3DReflect(
                m_PsByteCode->GetBufferPointer(),
                m_PsByteCode->GetBufferSize(),
                IID_PPV_ARGS(&psReflection)
            );
            if (SUCCEEDED(hr)) {
                reflection->AddStageReflection(ShaderStage::Pixel, psReflection);
            }
        }
        
        m_Reflection = reflection;
    }
    
    // 实现新的Stage-aware接口
    void SetStageInt(ShaderStage stage, const std::string& name, int value) override;
    Ref<StageResourceInfo> GetStageReflection(ShaderStage stage) const override;
    bool HasStage(ShaderStage stage) const override;
};
```

### ShaderReflection.h 分析

**当前问题：**
- 缺乏Stage抽象概念
- 接口过于简单，无法支持复杂的资源管理
- 没有考虑资源绑定冲突的解决方案

**重构方案：**
```cpp
// 新增Stage资源信息结构
struct StageResourceInfo {
    ShaderStage stage;
    std::vector<ShaderRegisterBlock> registerBlocks;
    std::vector<ResourceBinding> resourceBindings;
    std::unordered_map<std::string, ShaderParameter> parameters;
    
    // 便捷查询接口
    const ShaderRegisterBlock* GetRegisterBlock(const std::string& name) const;
    const ShaderRegisterBlock* GetRegisterBlock(uint32_t bindPoint, uint32_t space = 0) const;
    const ShaderParameter* GetParameter(const std::string& name) const;
};

// 扩展ResourceBinding，添加Stage信息
struct ResourceBinding {
    std::string Name;
    ResourceType Type;
    uint32_t BindPoint;
    uint32_t BindSpace;
    ShaderStage Stage;  // 新增：资源所属的Stage
    int RegisterBlockIndex = -1;
};

class ShaderReflection {
public:
    // 新增Stage-based接口
    virtual std::vector<StageResourceInfo> ReflectStageResources() = 0;
    virtual StageResourceInfo* GetStageResources(ShaderStage stage) = 0;
    virtual bool HasStage(ShaderStage stage) const = 0;
    
    // 保留兼容性接口（通过合并所有Stage实现）
    virtual BufferLayout ReflectVertexInputLayout() = 0;
    virtual std::vector<ShaderRegisterBlock> ReflectRegisterBlocks() = 0;
    virtual std::vector<ResourceBinding> ReflectResourceBindings() = 0;
};
```

## 具体重构实施计划

### 阶段1：基础架构扩展 (1-2天)
1. **新增ShaderStage枚举** 到 `ShaderReflection.h`
2. **扩展ResourceBinding和ShaderRegisterBlock** 添加Stage信息
3. **新增StageResourceInfo结构** 
4. **扩展ShaderReflection接口** 添加Stage-based方法

### 阶段2：D3D12ShaderReflection重构 (2-3天)
1. **重构内部数据结构** 使用Stage-based存储
2. **实现AddStageReflection方法** 替代MergeReflection
3. **实现新的Stage-based接口**
4. **保持向后兼容性** 通过聚合实现旧接口

### 阶段3：D3D12Shader重构 (2天)
1. **修改CreateReflection方法** 分别处理每个Stage
2. **实现Stage-aware参数设置接口**
3. **添加Stage查询接口**

### 阶段4：GraphicsPipeline集成 (3-4天)
1. **重构CreateRootSignature** 实现Stage-based Root Parameter分配
2. **添加资源绑定索引映射**
3. **实现便捷绑定接口**
4. **集成Shader Visibility优化**

### 阶段5：测试和验证 (2-3天)
1. **创建VS/PS相同绑定点测试案例**
2. **验证资源绑定正确性**
3. **性能测试和优化**
4. **文档和示例更新**

## 关键重构点

### 1. 数据结构重构优先级
```cpp
// 高优先级：基础抽象
enum class ShaderStage;
struct StageResourceInfo;

// 中优先级：接口扩展  
class ShaderReflection (新增Stage接口);

// 低优先级：实现细节
D3D12ShaderReflection内部重构;
```

### 2. 向后兼容性策略
- 保留所有现有公共接口
- 旧接口通过新接口实现（聚合模式）
- 逐步迁移到新接口，允许共存期

### 3. 错误处理强化
```cpp
// 添加详细的Stage验证
bool IsValidStage(ShaderStage stage) const;
uint32_t GetAvailableStages() const; // 返回位掩码

// 资源绑定安全检查
bool ValidateResourceBinding(ShaderStage stage, const std::string& name) const;
```

这个重构方案将彻底解决当前的资源绑定冲突问题，同时为未来的扩展奠定良好的基础。
