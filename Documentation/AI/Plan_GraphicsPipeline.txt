# 基于RHI风格的图形管线状态对象 (GraphicsPipeline) 实现计划

## 总体设计理念

基于现有RHI层的设计风格，GraphicsPipeline系统将采用接口抽象、类型分离、平台实现分离的设计模式。该系统封装不同图形API中的管线状态对象概念（如D3D12的PSO、OpenGL的状态组合），同时考虑到OpenGL运行时状态设置的特性。

## 文件结构和类组织

```
📁 Hazel/src/Hazel/RHI/Interface/
├── 📄 PipelineTypes.h              # 管线相关类型定义
├── 📄 IPipelineStateManager.h      # 管线状态管理器接口
└── 📄 IGraphicsPipeline.h          # 图形管线接口

📁 Platform/D3D12/
├── 📄 D3D12PipelineStateManager.h  # D3D12管线状态管理器
├── 📄 D3D12PipelineStateManager.cpp
├── 📄 D3D12GraphicsPipeline.h      # D3D12图形管线实现
└── 📄 D3D12GraphicsPipeline.cpp

📁 Platform/OpenGL/ (未来实现)
├── 📄 OpenGLPipelineStateManager.h
├── 📄 OpenGLPipelineStateManager.cpp
├── 📄 OpenGLGraphicsPipeline.h
└── 📄 OpenGLGraphicsPipeline.cpp
```

## 详细类设计

### 1. 类型定义 - PipelineTypes.h

```cpp
#pragma once

namespace Hazel {

    // 基础渲染状态枚举
    enum class BlendFactor {
        Zero, One, SrcColor, InvSrcColor, SrcAlpha, InvSrcAlpha,
        DstColor, InvDstColor, DstAlpha, InvDstAlpha, ConstantColor, InvConstantColor
    };

    enum class BlendOp {
        Add, Subtract, ReverseSubtract, Min, Max
    };

    enum class DepthFunc {
        Never, Less, LessEqual, Equal, NotEqual, GreaterEqual, Greater, Always
    };

    enum class CullMode {
        None, Front, Back
    };

    enum class FillMode {
        Solid, Wireframe, Point
    };

    enum class PrimitiveTopology {
        PointList, LineList, LineStrip, TriangleList, TriangleStrip
    };

    // 管线状态描述结构体
    struct RasterizerStateDesc {
        FillMode fillMode = FillMode::Solid;
        CullMode cullMode = CullMode::Back;
        bool frontCounterClockwise = false;
        bool depthClipEnable = true;
        bool scissorEnable = false;
        float depthBias = 0.0f;
        float depthBiasClamp = 0.0f;
        float slopeScaledDepthBias = 0.0f;
        
        // 便捷静态方法
        static RasterizerStateDesc Default() {
            return RasterizerStateDesc{};
        }
        
        static RasterizerStateDesc NoCull() {
            RasterizerStateDesc desc;
            desc.cullMode = CullMode::None;
            return desc;
        }
        
        static RasterizerStateDesc Wireframe() {
            RasterizerStateDesc desc;
            desc.fillMode = FillMode::Wireframe;
            return desc;
        }
    };

    struct BlendStateDesc {
        struct RenderTargetBlend {
            bool blendEnable = false;
            BlendFactor srcColorBlendFactor = BlendFactor::One;
            BlendFactor dstColorBlendFactor = BlendFactor::Zero;
            BlendOp colorBlendOp = BlendOp::Add;
            BlendFactor srcAlphaBlendFactor = BlendFactor::One;
            BlendFactor dstAlphaBlendFactor = BlendFactor::Zero;
            BlendOp alphaBlendOp = BlendOp::Add;
            uint8_t colorWriteMask = 0xF; // RGBA
        };

        bool alphaToCoverageEnable = false;
        bool independentBlendEnable = false;
        RenderTargetBlend renderTargetBlend[8];
        
        // 便捷静态方法
        static BlendStateDesc Opaque() {
            return BlendStateDesc{};
        }
        
        static BlendStateDesc AlphaBlend() {
            BlendStateDesc desc;
            desc.renderTargetBlend[0].blendEnable = true;
            desc.renderTargetBlend[0].srcColorBlendFactor = BlendFactor::SrcAlpha;
            desc.renderTargetBlend[0].dstColorBlendFactor = BlendFactor::InvSrcAlpha;
            return desc;
        }
        
        static BlendStateDesc Additive() {
            BlendStateDesc desc;
            desc.renderTargetBlend[0].blendEnable = true;
            desc.renderTargetBlend[0].srcColorBlendFactor = BlendFactor::One;
            desc.renderTargetBlend[0].dstColorBlendFactor = BlendFactor::One;
            return desc;
        }
    };

    struct DepthStencilStateDesc {
        bool depthEnable = true;
        bool depthWriteEnable = true;
        DepthFunc depthFunc = DepthFunc::Less;
        bool stencilEnable = false;
        uint8_t stencilReadMask = 0xFF;
        uint8_t stencilWriteMask = 0xFF;
        
        // 便捷静态方法
        static DepthStencilStateDesc Default() {
            return DepthStencilStateDesc{};
        }
        
        static DepthStencilStateDesc ReadOnly() {
            DepthStencilStateDesc desc;
            desc.depthWriteEnable = false;
            return desc;
        }
        
        static DepthStencilStateDesc Disabled() {
            DepthStencilStateDesc desc;
            desc.depthEnable = false;
            desc.depthWriteEnable = false;
            return desc;
        }
    };

    // 图形管线描述结构（专注于渲染状态）
    struct GraphicsPipelineDesc {
        Ref<Shader> shader;                    // Shader程序
        RasterizerStateDesc rasterizerState;   // 光栅化状态
        BlendStateDesc blendState;             // 混合状态
        DepthStencilStateDesc depthStencilState; // 深度模板状态
        PrimitiveTopology primitiveTopology = PrimitiveTopology::TriangleList;
        
        // 渲染目标格式
        enum class TextureFormat {
            RGBA8, BGRA8, RGBA16F, RGBA32F, DEPTH24STENCIL8, DEPTH32F
        } colorFormat = TextureFormat::RGBA8;
        TextureFormat depthStencilFormat = TextureFormat::DEPTH24STENCIL8;
        
        uint32_t sampleCount = 1;
        uint32_t sampleQuality = 0;
        
        // 便捷链式设置方法
        GraphicsPipelineDesc& SetShader(const Ref<Shader>& shader_) {
            shader = shader_;
            return *this;
        }
        
        // 注意：VertexLayout 从 Pipeline 中移除，应独立管理
        
        GraphicsPipelineDesc& SetRasterizerState(const RasterizerStateDesc& state) {
            rasterizerState = state;
            return *this;
        }
        
        GraphicsPipelineDesc& SetBlendState(const BlendStateDesc& state) {
            blendState = state;
            return *this;
        }
        
        GraphicsPipelineDesc& SetDepthStencilState(const DepthStencilStateDesc& state) {
            depthStencilState = state;
            return *this;
        }
        
        GraphicsPipelineDesc& SetPrimitiveTopology(PrimitiveTopology topology) {
            primitiveTopology = topology;
            return *this;
        }
    };

    // 管线状态句柄 (类似DescriptorHandle的设计)
    struct PipelineStateHandle {
        uint64_t id = 0;
        bool isValid = false;
        
        bool IsValid() const { return isValid; }
    };

} // namespace Hazel
```

### 2. 图形管线接口 - IGraphicsPipeline.h

```cpp
#pragma once

#include "PipelineTypes.h"
#include "Hazel/Core/Base.h"

namespace Hazel {

    class IGraphicsPipeline {
    public:
        virtual ~IGraphicsPipeline() = default;
        
        // 绑定管线状态（考虑OpenGL需要运行时设置状态）
        virtual void Bind() const = 0;
        
        // 获取管线描述
        virtual const GraphicsPipelineDesc& GetDescription() const = 0;
        
        // 获取管线状态句柄
        virtual PipelineStateHandle GetHandle() const = 0;
        
        // 平台特定的原生对象访问（可选）
        virtual void* GetNativeHandle() const { return nullptr; }
        
        // 验证管线状态是否有效
        virtual bool IsValid() const = 0;
    };

} // namespace Hazel
```

### 3. 管线状态管理器接口 - IPipelineStateManager.h

```cpp
#pragma once

#include "IGraphicsPipeline.h"
#include "PipelineTypes.h"
#include <unordered_map>

namespace Hazel {

    class IPipelineStateManager {
    public:
        virtual ~IPipelineStateManager() = default;
        
        // 创建图形管线
        virtual Ref<IGraphicsPipeline> CreateGraphicsPipeline(const GraphicsPipelineDesc& desc) = 0;
        
        // 管线缓存和复用
        virtual Ref<IGraphicsPipeline> GetOrCreatePipeline(const GraphicsPipelineDesc& desc) = 0;
        
        // 清理无用的管线
        virtual void GarbageCollect() = 0;
        
        // 获取缓存统计信息
        virtual size_t GetCachedPipelineCount() const = 0;
        
        // 单例访问（类似IGfxViewManager::Get()的风格）
        static IPipelineStateManager& Get();
        
    protected:
        // 管线哈希和缓存
        virtual uint64_t HashPipelineDesc(const GraphicsPipelineDesc& desc) const = 0;
        std::unordered_map<uint64_t, Ref<IGraphicsPipeline>> m_PipelineCache;
    };

} // namespace Hazel
```

### 4. D3D12实现 - D3D12GraphicsPipeline.h

```cpp
#pragma once

#include "Hazel/RHI/Interface/IGraphicsPipeline.h"
#include <d3d12.h>
#include <wrl/client.h>

namespace Hazel {

    class D3D12GraphicsPipeline : public IGraphicsPipeline {
    public:
        D3D12GraphicsPipeline(const GraphicsPipelineDesc& desc);
        virtual ~D3D12GraphicsPipeline();
        
        // IGraphicsPipeline 实现
        virtual void Bind() const override;
        virtual const GraphicsPipelineDesc& GetDescription() const override { return m_Description; }
        virtual PipelineStateHandle GetHandle() const override;
        virtual void* GetNativeHandle() const override { return m_PipelineState.Get(); }
        virtual bool IsValid() const override;
        
        // D3D12特定接口
        ID3D12PipelineState* GetD3D12PipelineState() const { return m_PipelineState.Get(); }
        ID3D12RootSignature* GetD3D12RootSignature() const { return m_RootSignature.Get(); }
        
    private:
        void CreateRootSignature();
        void CreatePipelineState();
        
        // 状态转换函数
        D3D12_RASTERIZER_DESC ConvertRasterizerState(const RasterizerStateDesc& desc) const;
        D3D12_BLEND_DESC ConvertBlendState(const BlendStateDesc& desc) const;
        D3D12_DEPTH_STENCIL_DESC ConvertDepthStencilState(const DepthStencilStateDesc& desc) const;
        
        GraphicsPipelineDesc m_Description;
        Microsoft::WRL::ComPtr<ID3D12PipelineState> m_PipelineState;
        Microsoft::WRL::ComPtr<ID3D12RootSignature> m_RootSignature;
        PipelineStateHandle m_Handle;
    };

} // namespace Hazel
```

### 5. D3D12管线状态管理器 - D3D12PipelineStateManager.h

```cpp
#pragma once

#include "Hazel/RHI/Interface/IPipelineStateManager.h"
#include "D3D12GraphicsPipeline.h"

namespace Hazel {

    class D3D12PipelineStateManager : public IPipelineStateManager {
    public:
        D3D12PipelineStateManager();
        virtual ~D3D12PipelineStateManager();
        
        // IPipelineStateManager 实现
        virtual Ref<IGraphicsPipeline> CreateGraphicsPipeline(const GraphicsPipelineDesc& desc) override;
        virtual Ref<IGraphicsPipeline> GetOrCreatePipeline(const GraphicsPipelineDesc& desc) override;
        virtual void GarbageCollect() override;
        virtual size_t GetCachedPipelineCount() const override;
        
    protected:
        virtual uint64_t HashPipelineDesc(const GraphicsPipelineDesc& desc) const override;
        
    private:
        static std::unique_ptr<D3D12PipelineStateManager> s_Instance;
        friend class IPipelineStateManager;
    };

} // namespace Hazel
```

### 6. OpenGL实现设计考虑 (未来实现)

#### OpenGLGraphicsPipeline.h

```cpp
#pragma once

#include "Hazel/RHI/Interface/IGraphicsPipeline.h"

namespace Hazel {

    // OpenGL实现：运行时状态设置模式
    class OpenGLGraphicsPipeline : public IGraphicsPipeline {
    public:
        OpenGLGraphicsPipeline(const GraphicsPipelineDesc& desc);
        virtual ~OpenGLGraphicsPipeline();
        
        // IGraphicsPipeline 实现
        virtual void Bind() const override;
        virtual const GraphicsPipelineDesc& GetDescription() const override { return m_Description; }
        virtual PipelineStateHandle GetHandle() const override;
        virtual void* GetNativeHandle() const override { return reinterpret_cast<void*>(m_ProgramID); }
        virtual bool IsValid() const override;
        
    private:
        void CompileShaderProgram();
        void CacheRenderStates();
        
        // OpenGL特定：运行时状态设置函数
        void ApplyRasterizerState() const;
        void ApplyBlendState() const;
        void ApplyDepthStencilState() const;
        
        GraphicsPipelineDesc m_Description;
        uint32_t m_ProgramID = 0;
        uint32_t m_VertexArrayObject = 0; // 可能需要VAO
        PipelineStateHandle m_Handle;
        
        // 缓存的OpenGL状态信息
        mutable bool m_StatesDirty = true;
    };

} // namespace Hazel
```

## 需要创建的类清单

### 🔧 接口类 (RHI/Interface)
1. **IGraphicsPipeline** - 图形管线接口
2. **IPipelineStateManager** - 管线状态管理器接口

### 📊 类型类 (RHI/Interface) 
3. **PipelineTypes.h** - 所有管线相关的枚举、结构体和描述符

### 🎮 D3D12平台实现 (Platform/D3D12)
4. **D3D12GraphicsPipeline** - D3D12图形管线实现（预编译PSO模式）
5. **D3D12PipelineStateManager** - D3D12管线状态管理器

### 🔮 OpenGL平台实现 (Platform/OpenGL) - 未来实现
6. **OpenGLGraphicsPipeline** - OpenGL图形管线实现（运行时状态设置模式）
7. **OpenGLPipelineStateManager** - OpenGL管线状态管理器

## 使用示例

### 基础使用
```cpp
// 创建管线描述（只包含渲染状态）
auto pipelineDesc = GraphicsPipelineDesc{}
    .SetShader(m_ColorShader)
    .SetRasterizerState(RasterizerStateDesc::Default())
    .SetBlendState(BlendStateDesc::Opaque())
    .SetDepthStencilState(DepthStencilStateDesc::Default());

// 通过管理器创建（支持缓存）
auto& pipelineManager = IPipelineStateManager::Get();
Ref<IGraphicsPipeline> pipeline = pipelineManager.GetOrCreatePipeline(pipelineDesc);

// 绑定 Pipeline（渲染状态）
pipeline->Bind();

// 独立绑定 VertexArray（顶点布局）
mesh->GetVertexArray()->Bind();
```

### 高级使用
```cpp
// 透明物体管线（只关注渲染状态）
auto transparentPipeline = pipelineManager.GetOrCreatePipeline(
    GraphicsPipelineDesc{}
        .SetShader(transparentShader)
        .SetBlendState(BlendStateDesc::AlphaBlend())
        .SetDepthStencilState(DepthStencilStateDesc::ReadOnly())
);

// 线框模式管线
auto wireframePipeline = pipelineManager.GetOrCreatePipeline(
    GraphicsPipelineDesc{}
        .SetShader(wireframeShader)
        .SetRasterizerState(RasterizerStateDesc::Wireframe())
        .SetBlendState(BlendStateDesc::Opaque())
);

// VertexLayout 在渲染时独立绑定
// 这样同一个Pipeline可以用于不同的顶点布局
```

## 实现步骤和优先级

### 🚀 第一阶段：基础框架
1. 创建 `PipelineTypes.h` - 定义所有基础类型和枚举
2. 创建 `IGraphicsPipeline.h` - 图形管线接口
3. 创建 `IPipelineStateManager.h` - 管线状态管理器接口

### 🎯 第二阶段：D3D12实现
4. 实现 `D3D12GraphicsPipeline` - 核心D3D12管线实现
5. 实现 `D3D12PipelineStateManager` - D3D12管线管理
6. 集成到现有渲染系统

### 🔧 第三阶段：系统集成
7. 重构 `SceneViewLayer.cpp` 使用新的管线系统
8. 添加管线缓存和性能优化
9. 完善错误处理和调试信息

### 🌟 第四阶段：OpenGL支持 (未来)
10. 实现 `OpenGLGraphicsPipeline` - OpenGL管线实现
11. 实现 `OpenGLPipelineStateManager` - OpenGL管线管理
12. 跨平台测试和优化

## Unity SRP Batch 式架构设计

### 🎯 **正确的分层设计**

基于Unity SRP Batch的设计理念，我们的系统应该采用以下分层：

```
📊 应用层 (SceneRenderer/CameraRenderer)
├── 🔄 批处理逻辑 (类似Unity SRP Batcher)
│   ├── 按Shader分组物体
│   ├── GPU Instancing决策
│   └── 绘制命令排序优化
├── 📋 绘制命令收集 (类似Unity CommandBuffer)
│   ├── 视锥剔除
│   ├── LOD选择
│   └── 透明度排序
└── 🎯 渲染队列管理

📦 材质系统层
├── 🎨 材质参数管理 (类似Unity MaterialPropertyBlock)
├── ⚙️ Pipeline状态提取 (从材质中提取渲染状态)
└── 🔗 Shader变体管理

🔧 RHI层 (GraphicsPipeline系统)
├── 🏭 Pipeline状态对象管理 (纯渲染状态)
├── 📐 VertexArray独立管理 (不依赖Pipeline)
└── 🎮 CommandList执行
```

### 🚀 **关键分离原则**

1. **Pipeline != VertexLayout**
   ```cpp
   // ❌ 错误：Pipeline包含VertexLayout
   auto pipeline = CreatePipeline(shader, vertexLayout, renderStates);
   
   // ✅ 正确：分离管理
   auto pipeline = CreatePipeline(shader, renderStates);  // 只有渲染状态
   auto vertexArray = mesh->GetVertexArray();           // 独立的顶点布局
   
   // 绑定时分别设置
   pipeline->Bind();      // 设置PSO和根签名
   vertexArray->Bind();   // 设置顶点缓冲区和输入布局
   ```

2. **批处理在应用层，不在RHI层**
   ```cpp
   // 应用层批处理逻辑
   class SRPBatcher {
   public:
       void CollectDrawCommands(const Scene& scene);
       void SortByShader();                    // 按Shader分组
       void GroupInstancedObjects();           // 识别可实例化的物体
       void Execute(CommandList& cmdList);     // 执行优化后的绘制
   };
   
   // RHI层只负责状态设置
   class GraphicsPipeline {
       void Bind();  // 只设置渲染状态，不参与批处理逻辑
   };
   ```

3. **材质系统提供状态信息**
   ```cpp
   class Material {
   public:
       // 材质提供Pipeline创建所需的渲染状态
       RenderStateDesc GetRenderState() const;
       Ref<Shader> GetShader() const;
       
       // 但不参与批处理决策
       void UploadParameters(ConstantBuffer& buffer);
   };
   ```

### 🔄 **Unity SRP Batch 流程对比**

#### Unity SRP Batch 流程：
```
Culling → Sorting → Batching → GPU Upload → Draw Calls
    ↓         ↓         ↓           ↓           ↓
应用层     应用层     应用层      材质层      RHI层
```

#### 我们的对应流程：
```cpp
// 1. 应用层：收集和批处理
SRPBatcher batcher;
batcher.CollectDrawCommands(scene);
batcher.SortByShader();
batcher.GroupInstancedObjects();

// 2. 材质层：状态提取和参数管理
for (auto& drawCmd : batcher.GetCommands()) {
    auto renderState = drawCmd.material->GetRenderState();
    auto pipeline = pipelineManager.GetOrCreatePipeline(renderState);
    drawCmd.pipeline = pipeline;
}

// 3. RHI层：高效执行
batcher.Execute(commandList);
```

### 🎮 **实际绘制时的分离**

```cpp
void SRPBatcher::Execute(CommandList& cmdList) {
    GraphicsPipeline* currentPipeline = nullptr;
    VertexArray* currentVertexArray = nullptr;
    
    for (auto& cmd : m_OptimizedCommands) {
        // 1. Pipeline状态切换（渲染状态）
        if (currentPipeline != cmd.pipeline) {
            currentPipeline = cmd.pipeline;
            currentPipeline->Bind();  // 设置PSO, 根签名, 渲染状态
        }
        
        // 2. VertexArray切换（顶点布局）- 独立于Pipeline
        if (currentVertexArray != cmd.mesh->GetVertexArray()) {
            currentVertexArray = cmd.mesh->GetVertexArray();
            currentVertexArray->Bind();  // 设置顶点缓冲区和输入布局
        }
        
        // 3. 材质参数绑定
        cmd.material->BindParameters(cmdList);
        
        // 4. 绘制调用
        cmdList.DrawIndexed(cmd.indexCount, cmd.startIndex);
    }
}
```

## 设计优势

### ✅ **符合现有RHI风格**
- 接口抽象与实现分离
- 类型定义独立
- 单例管理模式
- 句柄设计模式

### ✅ **跨平台兼容性**
- D3D12: 预编译PSO模式，高性能
- OpenGL: 运行时状态设置模式，灵活性
- 统一的抽象接口

### ✅ **性能优化**
- 管线状态缓存和复用
- 哈希快速查找
- 延迟状态设置（OpenGL）

### ✅ **易用性**
- 链式设置API
- 便捷的预设状态
- 清晰的错误处理

## 注意事项

1. **性能考虑**：管线状态对象创建开销大，必须实现缓存机制
2. **内存管理**：确保所有ComPtr和资源正确释放
3. **错误处理**：添加完善的验证和错误报告
4. **线程安全**：考虑多线程环境下的管线创建和缓存
5. **调试支持**：添加调试信息和性能统计 