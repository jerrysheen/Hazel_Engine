# MaterialBatch与DrawCommand架构设计

## 1. 分离设计的原则

在现代渲染引擎中，将材质管理与绘制命令分离是一种优秀的架构设计。这种分离基于以下原则：

- **单一职责原则**：每个类只负责一个明确的任务
- **关注点分离**：材质数据管理与绘制操作是两个不同的关注点
- **提高代码复用**：同一材质批次管理器可用于不同的渲染路径
- **优化灵活性**：可以独立优化材质数据和绘制命令

## 2. MaterialBatchManager职责

MaterialBatchManager主要负责管理材质数据和相关资源，不直接执行绘制操作。

### 核心职责：
- 管理大型常量缓冲区的分配和使用
- 为材质分配内存区域和计算偏移量
- 维护描述符表和CBV（常量缓冲区视图）
- 处理材质数据的上传和更新
- 优化内存使用和减少碎片

### 建议的类接口设计：

```cpp
// 材质批次信息结构
struct MaterialBatchInfo {
    uint32_t descriptorIndex;    // 材质在描述符堆中的索引
    uint32_t bufferOffset;       // 材质在大缓冲区中的偏移
    uint32_t dataSize;           // 材质数据大小(对齐后)
    uint64_t materialId;         // 材质唯一ID，用于缓存查找
};

// 材质批量管理器
class MaterialBatchManager {
public:
    static MaterialBatchManager& Get();
    
    // 初始化
    void Initialize(uint32_t maxMaterials = 1024, uint32_t maxMaterialSize = 256);
    
    // 帧循环
    void BeginFrame();
    void EndFrame();
    
    // 材质注册与管理
    MaterialBatchInfo RegisterMaterial(const Ref<Material>& material);
    void UploadMaterialData(const MaterialBatchInfo& batchInfo, const void* data, uint32_t size);
    
    // 设置材质状态，但不执行绘制
    void SetMaterialState(const MaterialBatchInfo& batchInfo, CommandList* cmdList);
    
    // 资源访问
    void* GetCurrentBufferAddress() const;
    Ref<DescriptorHeap> GetDescriptorHeap() const;
    
private:
    // 帧资源结构
    struct FrameResources {
        Ref<ConstantBuffer> materialBuffer;  // 大型上传缓冲区
        uint32_t currentOffset;              // 当前分配偏移
        void* mappedData;                    // 映射的CPU内存地址
    };
    
    // 多帧环形缓冲设计
    std::array<FrameResources, 3> m_FrameResources;
    uint32_t m_CurrentFrame = 0;
    
    // 描述符堆管理
    Ref<DescriptorHeap> m_CBVDescriptorHeap;
    uint32_t m_DescriptorSize = 0;
    
    // 材质批次缓存
    std::unordered_map<uint64_t, MaterialBatchInfo> m_MaterialBatches;
    std::vector<MaterialBatchInfo> m_ActiveBatches;
    
    // 内部方法
    uint32_t AllocateBuffer(uint32_t size);
    uint32_t CreateDescriptor(uint32_t bufferOffset, uint32_t size);
};
```

## 3. DrawList/RenderCommandBuffer职责

DrawList（或RenderCommandBuffer）负责收集、排序和执行绘制命令，处理渲染状态切换和优化绘制顺序。

### 核心职责：
- 收集场景中需要渲染的对象
- 根据材质、深度等对绘制命令进行排序
- 管理渲染状态的切换
- 执行实际的绘制调用
- 支持实例化和间接绘制等高级功能

### 建议的类接口设计：

```cpp
// 绘制命令结构
struct DrawCommand {
    Ref<Mesh> mesh;                // 要绘制的网格
    Ref<Material> material;        // 使用的材质
    glm::mat4 transform;           // 对象变换矩阵
    uint32_t instanceCount = 1;    // 实例数量
    uint32_t startIndexLocation = 0;
    int32_t baseVertexLocation = 0;
    uint32_t startInstanceLocation = 0;
};

// 排序方式枚举
enum class SortMode {
    None,           // 不排序
    FrontToBack,    // 从前到后(不透明物体优化)
    BackToFront,    // 从后到前(透明物体必需)
    ByMaterial,     // 按材质ID排序(减少状态切换)
    ByShader        // 按着色器排序
};

// 绘制列表类
class DrawList {
public:
    // 添加绘制命令
    void AddMeshDraw(const Ref<Mesh>& mesh, const Ref<Material>& material, const glm::mat4& transform);
    
    // 批处理和实例化支持
    void AddInstancedMeshDraw(const Ref<Mesh>& mesh, const Ref<Material>& material, 
                              const std::vector<glm::mat4>& transforms);
    
    // 排序和优化
    void Sort(SortMode mode = SortMode::ByMaterial);
    
    // 执行所有绘制命令
    void Execute(CommandList* cmdList, MaterialBatchManager& batchManager);
    
    // 命令列表管理
    void Clear();
    size_t GetCommandCount() const { return m_Commands.size(); }
    
    // 配置选项
    void EnableInstancing(bool enable) { m_UseInstancing = enable; }
    void SetDefaultSortMode(SortMode mode) { m_DefaultSortMode = mode; }
    
private:
    std::vector<DrawCommand> m_Commands;
    bool m_UseInstancing = true;
    SortMode m_DefaultSortMode = SortMode::ByMaterial;
    
    // 内部辅助方法
    void MergeInstancedCommands();
    void UpdatePerObjectConstants(CommandList* cmdList, const DrawCommand& cmd);
    void BindMesh(CommandList* cmdList, const Ref<Mesh>& mesh);
};
```

## 4. 两者的协作关系

MaterialBatchManager和DrawList是相互协作但职责分明的两个组件：

1. **数据流向**：
   - Material对象提供原始数据
   - MaterialBatchManager负责数据的GPU上传和管理
   - DrawList决定何时使用这些数据进行绘制

2. **绘制流程**：
   - DrawList收集所有绘制命令
   - DrawList将命令排序以优化状态切换
   - 执行时，DrawList使用MaterialBatchManager设置材质状态
   - DrawList执行实际的绘制命令

3. **典型执行序列**：
   ```
   Begin Frame
   ├── MaterialBatchManager.BeginFrame()
   ├── DrawList.Clear()
   ├── 收集可见对象并添加到DrawList
   ├── DrawList.Sort()
   ├── DrawList.Execute()
   │   ├── 对每个命令:
   │   │   ├── 获取/更新MaterialBatchInfo
   │   │   ├── 上传材质数据(如需要)
   │   │   ├── 设置材质状态
   │   │   ├── 绑定网格
   │   │   └── 执行绘制调用
   └── MaterialBatchManager.EndFrame()
   ```

## 5. 实现示例

### DrawList.Execute()的实现:

```cpp
void DrawList::Execute(CommandList* cmdList, MaterialBatchManager& batchManager)
{
    // 优化：按材质分组，减少状态切换
    if (m_DefaultSortMode != SortMode::None && !m_IsSorted) {
        Sort(m_DefaultSortMode);
    }
    
    // 如果启用了实例化，尝试合并可实例化的绘制命令
    if (m_UseInstancing) {
        MergeInstancedCommands();
    }
    
    // 当前状态跟踪(避免冗余状态切换)
    Ref<Material> currentMaterial = nullptr;
    Ref<Mesh> currentMesh = nullptr;
    
    // 执行所有绘制命令
    for (auto& cmd : m_Commands) {
        // 材质状态切换
        if (currentMaterial != cmd.material) {
            currentMaterial = cmd.material;
            
            // 获取/注册材质数据位置
            MaterialBatchInfo batchInfo = batchManager.RegisterMaterial(currentMaterial);
            
            // 如果材质数据已变化，上传到当前帧缓冲区
            if (currentMaterial->NeedsUpdate()) {
                currentMaterial->UploadToBuffer(
                    batchManager.GetCurrentBufferAddress(),
                    batchInfo.bufferOffset
                );
                currentMaterial->MarkUpdated();
            }
            
            // 设置材质状态(描述符表等)
            batchManager.SetMaterialState(batchInfo, cmdList);
        }
        
        // 网格状态切换
        if (currentMesh != cmd.mesh) {
            currentMesh = cmd.mesh;
            BindMesh(cmdList, currentMesh);
        }
        
        // 设置每对象的常量(如变换矩阵)
        UpdatePerObjectConstants(cmdList, cmd);
        
        // 执行绘制调用
        if (cmd.instanceCount > 1) {
            // 实例化绘制
            cmdList->DrawIndexedInstanced(
                cmd.mesh->GetIndexCount(),
                cmd.instanceCount,
                cmd.startIndexLocation,
                cmd.baseVertexLocation,
                cmd.startInstanceLocation
            );
        } else {
            // 标准绘制
            cmdList->DrawIndexed(
                cmd.mesh->GetIndexCount(),
                cmd.startIndexLocation,
                cmd.baseVertexLocation
            );
        }
    }
}
```

### MaterialBatchManager.SetMaterialState()的实现:

```cpp
void MaterialBatchManager::SetMaterialState(const MaterialBatchInfo& batchInfo, CommandList* cmdList)
{
    // 设置描述符表，指向材质的常量缓冲区视图
    cmdList->SetGraphicsRootDescriptorTable(
        0, // 根参数索引，与根签名匹配
        CD3DX12_GPU_DESCRIPTOR_HANDLE(
            m_CBVDescriptorHeap->GetGPUDescriptorHandleForHeapStart(),
            batchInfo.descriptorIndex,
            m_DescriptorSize
        )
    );
    
    // 注意：这里不设置PSO或根签名，那是DrawList的职责
    // 这种分离确保了MaterialBatchManager只关注材质数据
}
```

## 6. 与现代引擎的对比

### Unity SRP(可编程渲染管线)
- **MaterialPropertyBlock**: 类似于我们的MaterialBatchManager
- **CommandBuffer**: 类似于我们的DrawList
- **SRP Batcher**: 通过分析shader变体和材质属性进行自动批处理

### Unreal Engine
- **FMaterialRenderProxy**: 材质数据管理，类似MaterialBatchManager
- **FMeshBatch/FMeshDrawCommand**: 网格绘制数据，类似DrawCommand
- **FRHICommandList**: 渲染硬件接口命令列表，类似DrawList

## 7. 最佳实践与优化建议

1. **材质排序**:
   - 尽可能按材质ID对绘制命令排序，减少状态切换
   - 对于透明物体，保持从后到前的排序

2. **内存管理**:
   - 使用环形缓冲区避免GPU-CPU资源争用
   - 预分配足够大的缓冲区，避免动态调整大小

3. **描述符管理**:
   - 使用描述符表而非单个描述符绑定
   - 考虑材质数据的更新频率分配描述符位置

4. **实例化**:
   - 对相同材质和网格的对象使用实例化
   - 实现自动实例合并

5. **多线程处理**:
   - 材质数据准备可以在工作线程进行
   - 命令排序也可并行化

6. **缓存友好**:
   - 保持材质数据布局与GPU着色器寄存器对齐
   - 避免随机访问模式，特别是在热路径上

## 8. 扩展功能

1. **GPU驱动的间接绘制**:
   - 支持ExecuteIndirect，让GPU动态决定绘制参数
   - 实现视锥剔除和细节级别在GPU上的计算

2. **材质变体系统**:
   - 支持根据宏定义生成材质变体
   - 优化着色器排列以减少状态切换

3. **多视图渲染**:
   - 扩展DrawList支持多视图(如阴影图、反射等)
   - 允许每个视图使用不同的材质属性

4. **统计与调试**:
   - 实现绘制统计收集
   - 材质状态切换计数
   - 可视化材质批次和内存使用
