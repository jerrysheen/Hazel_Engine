# 资源绑定系统实现计划

## 总体设计

资源绑定系统是渲染API抽象层的关键组件，它允许跨平台统一的方式将着色器资源（纹理、常量缓冲区等）绑定到渲染管线。一个好的资源绑定系统应该高效、灵活，并能适应不同API的资源绑定模型。

## 资源绑定模型差异

不同的图形API使用不同的资源绑定模型：

1. **DirectX 12**:
   - 使用根签名(Root Signature)定义资源布局
   - 使用描述符堆(Descriptor Heap)存储资源视图
   - 资源通过描述符表(Descriptor Table)、根描述符(Root Descriptor)和根常量(Root Constants)绑定

2. **OpenGL**:
   - 使用纹理单元(Texture Unit)和统一缓冲区对象(UBO)绑定槽
   - 直接通过API调用将资源绑定到特定槽位
   - 没有显式的资源布局描述

3. **Vulkan**:
   - 使用描述符集布局(Descriptor Set Layout)和管线布局(Pipeline Layout)
   - 资源通过描述符集(Descriptor Set)绑定
   - 支持推送常量(Push Constants)

## 类结构设计

### 1. 资源类型和绑定点

```cpp
// 在 Hazel/src/Hazel/Renderer/ResourceBinding.h 中定义

namespace Hazel {

    // 资源类型
    enum class ResourceType {
        UniformBuffer,    // 常量/统一缓冲区
        StorageBuffer,    // 存储缓冲区
        Texture2D,        // 2D纹理
        TextureCube,      // 立方体纹理
        Texture3D,        // 3D纹理
        Sampler,          // 采样器
        RWTexture2D,      // 可读写的2D纹理
        RWStorageBuffer   // 可读写的存储缓冲区
    };

    // 着色器阶段标志
    enum class ShaderStage : uint32_t {
        None       = 0,
        Vertex     = BIT(0),
        Fragment   = BIT(1),
        Geometry   = BIT(2),
        TessControl= BIT(3),
        TessEval   = BIT(4),
        Compute    = BIT(5),
        All        = 0xFFFFFFFF
    };

    // 绑定点描述
    struct BindingPoint {
        uint32_t binding;
        ResourceType type;
        ShaderStage stages;
        uint32_t count; // 数组大小，通常为1
        
        bool operator==(const BindingPoint& other) const;
    };

} // namespace Hazel
```

### 2. 绑定布局

```cpp
class BindingLayout {
public:
    virtual ~BindingLayout() = default;
    
    // 创建一个绑定布局
    static Ref<BindingLayout> Create(const std::initializer_list<BindingPoint>& bindings);
    
    // 获取绑定点描述
    const std::vector<BindingPoint>& GetBindings() const { return m_Bindings; }
    
    // 查找特定资源的绑定索引
    int32_t FindBindingIndex(uint32_t binding, ResourceType type) const;
    
protected:
    BindingLayout() = default;
    
    std::vector<BindingPoint> m_Bindings;
};
```

### 3. 绑定组

```cpp
class BindingGroup {
public:
    virtual ~BindingGroup() = default;
    
    // 创建一个绑定组
    static Ref<BindingGroup> Create(const Ref<BindingLayout>& layout);
    
    // 设置资源
    virtual void SetUniformBuffer(uint32_t binding, const Ref<UniformBuffer>& buffer, uint32_t offset = 0, uint32_t size = 0) = 0;
    virtual void SetStorageBuffer(uint32_t binding, const Ref<StorageBuffer>& buffer, uint32_t offset = 0, uint32_t size = 0) = 0;
    virtual void SetTexture(uint32_t binding, const Ref<Texture>& texture) = 0;
    virtual void SetSampler(uint32_t binding, const Ref<Sampler>& sampler) = 0;
    
    // 绑定所有资源
    virtual void Bind() const = 0;
    
    // 获取绑定布局
    const Ref<BindingLayout>& GetLayout() const { return m_Layout; }
    
protected:
    BindingGroup(const Ref<BindingLayout>& layout) : m_Layout(layout) {}
    
    Ref<BindingLayout> m_Layout;
};
```

### 4. D3D12实现

```cpp
// 在 Platform/D3D12/D3D12BindingLayout.h 中定义

class D3D12BindingLayout : public BindingLayout {
public:
    D3D12BindingLayout(const std::initializer_list<BindingPoint>& bindings);
    virtual ~D3D12BindingLayout();
    
    // 获取根签名
    ID3D12RootSignature* GetRootSignature() const { return m_RootSignature.Get(); }
    
private:
    void CreateRootSignature();
    
    Microsoft::WRL::ComPtr<ID3D12RootSignature> m_RootSignature;
    
    // 记录绑定点到根参数的映射
    std::vector<uint32_t> m_BindingToRootParamIndex;
};

// 在 Platform/D3D12/D3D12BindingGroup.h 中定义

class D3D12BindingGroup : public BindingGroup {
public:
    D3D12BindingGroup(const Ref<BindingLayout>& layout);
    virtual ~D3D12BindingGroup();
    
    virtual void SetUniformBuffer(uint32_t binding, const Ref<UniformBuffer>& buffer, uint32_t offset = 0, uint32_t size = 0) override;
    virtual void SetStorageBuffer(uint32_t binding, const Ref<StorageBuffer>& buffer, uint32_t offset = 0, uint32_t size = 0) override;
    virtual void SetTexture(uint32_t binding, const Ref<Texture>& texture) override;
    virtual void SetSampler(uint32_t binding, const Ref<Sampler>& sampler) override;
    
    virtual void Bind() const override;
    
private:
    void UpdateDescriptors();
    
    // CBV/SRV/UAV描述符堆
    Microsoft::WRL::ComPtr<ID3D12DescriptorHeap> m_CBVSRVUAVHeap;
    
    // 采样器描述符堆
    Microsoft::WRL::ComPtr<ID3D12DescriptorHeap> m_SamplerHeap;
    
    // 绑定资源
    struct BoundResource {
        ResourceType type;
        union {
            struct {
                ID3D12Resource* resource;
                uint32_t offset;
                uint32_t size;
            } buffer;
            
            struct {
                ID3D12Resource* resource;
                D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc;
            } texture;
            
            struct {
                D3D12_SAMPLER_DESC samplerDesc;
            } sampler;
        };
    };
    
    std::unordered_map<uint32_t, BoundResource> m_Resources;
    bool m_IsDirty = true;
};
```

### 5. OpenGL实现

```cpp
// 在 Platform/OpenGL/OpenGLBindingLayout.h 中定义

class OpenGLBindingLayout : public BindingLayout {
public:
    OpenGLBindingLayout(const std::initializer_list<BindingPoint>& bindings);
    virtual ~OpenGLBindingLayout();
    
    // OpenGL没有显式的布局对象，主要是跟踪绑定点
};

// 在 Platform/OpenGL/OpenGLBindingGroup.h 中定义

class OpenGLBindingGroup : public BindingGroup {
public:
    OpenGLBindingGroup(const Ref<BindingLayout>& layout);
    virtual ~OpenGLBindingGroup();
    
    virtual void SetUniformBuffer(uint32_t binding, const Ref<UniformBuffer>& buffer, uint32_t offset = 0, uint32_t size = 0) override;
    virtual void SetStorageBuffer(uint32_t binding, const Ref<StorageBuffer>& buffer, uint32_t offset = 0, uint32_t size = 0) override;
    virtual void SetTexture(uint32_t binding, const Ref<Texture>& texture) override;
    virtual void SetSampler(uint32_t binding, const Ref<Sampler>& sampler) override;
    
    virtual void Bind() const override;
    
private:
    struct OpenGLBindingResource {
        ResourceType type;
        uint32_t handle = 0;
        uint32_t textureUnit = 0; // 对于纹理
        uint32_t offset = 0;
        uint32_t size = 0;
    };
    
    std::unordered_map<uint32_t, OpenGLBindingResource> m_Resources;
};
```

## 与着色器和管线集成

```cpp
// 在 Hazel/src/Hazel/Renderer/Shader.h 中添加

class Shader {
public:
    // ...现有方法...
    
    // 获取绑定布局
    const Ref<BindingLayout>& GetBindingLayout() const { return m_BindingLayout; }
    
protected:
    // ...现有成员...
    
    Ref<BindingLayout> m_BindingLayout;
    
    // 通过着色器反射提取绑定布局
    void ExtractBindingLayout();
};

// 在 Hazel/src/Hazel/Renderer/Pipeline.h 中添加

class GraphicsPipeline {
public:
    // ...现有方法...
    
    // 绑定附加的资源组
    virtual void BindResourceGroup(uint32_t set, const Ref<BindingGroup>& group) const = 0;
    
protected:
    // ...现有成员...
};
```

## 使用示例

```cpp
// 定义绑定布局
auto layout = BindingLayout::Create({
    { 0, ResourceType::UniformBuffer, ShaderStage::Vertex | ShaderStage::Fragment, 1 },
    { 1, ResourceType::Texture2D, ShaderStage::Fragment, 1 },
    { 2, ResourceType::Sampler, ShaderStage::Fragment, 1 }
});

// 创建绑定组
auto bindingGroup = BindingGroup::Create(layout);

// 设置资源
auto cameraBuffer = UniformBuffer::Create(sizeof(CameraData));
cameraBuffer->SetData(&cameraData, sizeof(CameraData));

auto texture = Texture2D::Create("assets/textures/brick.png");
auto sampler = Sampler::Create(SamplerState{});

bindingGroup->SetUniformBuffer(0, cameraBuffer);
bindingGroup->SetTexture(1, texture);
bindingGroup->SetSampler(2, sampler);

// 在渲染时使用
pipeline->Bind();
bindingGroup->Bind();

// 或者，如果管线支持多组绑定
pipeline->Bind();
pipeline->BindResourceGroup(0, bindingGroup);

// 绘制调用
...
```

## 自动从材质绑定资源

```cpp
void Renderer::Submit(const Ref<Mesh>& mesh, const Ref<Material>& material, const glm::mat4& transform)
{
    // 获取或创建材质的管线
    auto pipeline = material->GetPipeline();
    
    // 获取或创建绑定组
    auto bindingGroup = material->GetBindingGroup();
    
    // 设置全局资源（如相机数据）
    m_CameraBindingGroup->SetUniformBuffer(0, m_CameraBuffer);
    
    // 渲染
    pipeline->Bind();
    pipeline->BindResourceGroup(0, m_CameraBindingGroup); // 全局资源（集合0）
    pipeline->BindResourceGroup(1, bindingGroup);         // 材质资源（集合1）
    
    mesh->Bind();
    DrawIndexed(mesh->GetIndexCount());
}
```

## 实现步骤

1. 定义资源类型和绑定点结构
2. 实现BindingLayout抽象基类
3. 实现BindingGroup抽象基类
4. 针对D3D12实现:
   - 实现根签名创建
   - 实现描述符堆管理
   - 实现资源绑定逻辑
5. 针对OpenGL实现:
   - 实现UBO绑定
   - 实现纹理单元管理
   - 实现采样器绑定
6. 集成到着色器系统:
   - 添加着色器反射以提取绑定布局
   - 更新着色器加载逻辑
7. 集成到管线系统:
   - 添加资源组绑定接口
   - 更新管线状态对象创建
8. 集成到材质系统:
   - 自动从材质属性创建绑定组
   - 支持材质实例

## 注意事项

1. **性能考虑**
   - 尽量减少描述符更新和堆创建
   - 使用缓存优化常用的布局和绑定组
   - 分析不同API的资源绑定开销

2. **API特性差异**
   - 考虑不同API的绑定限制（如最大绑定数）
   - 处理一些API特有的功能（如D3D12的根常量）

3. **调试支持**
   - 添加资源绑定验证
   - 详细的错误消息和调试信息

4. **扩展性**
   - 设计应允许未来添加新的资源类型
   - 支持计算着色器特定的资源绑定

5. **线程安全**
   - 确保资源更新在正确的线程上进行
   - 考虑并发访问绑定组的情况 