# 哈泽尔引擎渲染API抽象计划

## 现状分析
目前的SceneViewLayer.cpp直接使用了大量D3D12特定的API，包括：
- 直接创建和使用D3D12管线状态对象（PSO）
- 硬编码的着色器字节码处理
- 显式的D3D12资源绑定（如描述符堆、根签名等）
- 渲染状态设置（光栅化状态、混合状态等）

已经有一些抽象实现：
- 部分渲染API管理器（RenderAPIManager）
- 基本的Buffer抽象（VertexBuffer、IndexBuffer、ConstantBuffer）
- Mesh加载系统
- RenderTarget/TextureBuffer抽象

## 需要实现的抽象

### 1. 渲染管线抽象（Pipeline State Object）
- [ ] 创建`GraphicsPipeline`抽象基类
  - [ ] 定义通用接口（绑定、设置状态等）
  - [ ] 封装光栅化状态
  - [ ] 封装混合状态
  - [ ] 封装深度/模板状态
  - [ ] 封装输入布局
  - [ ] 封装拓扑类型
- [ ] 实现平台特定派生类：`D3D12GraphicsPipeline`、`OpenGLGraphicsPipeline`等

### 2. 着色器系统增强
- [ ] 重构`Shader`类，提供更好的跨平台支持
  - [ ] 添加编译缓存系统
  - [ ] 实现着色器变体和宏支持
  - [ ] 统一的反射系统，用于获取着色器输入布局和资源绑定
- [ ] 实现着色器资源绑定抽象

### 3. 材质系统实现
- [ ] 创建`Material`抽象基类
  - [ ] 定义属性映射系统
  - [ ] 支持多种材质模型（PBR、简单光照等）
  - [ ] 与着色器系统集成
- [ ] 实现材质实例化功能
- [ ] 支持材质参数动态更新

### 4. 渲染状态对象
- [ ] 创建`RenderState`抽象
  - [ ] 封装混合状态
  - [ ] 封装深度/模板状态
  - [ ] 封装光栅化状态
- [ ] 实现预设状态（透明、不透明等）

### 5. 描述符/资源绑定系统
- [ ] 创建统一的资源绑定抽象
  - [ ] 提供统一的接口用于绑定各类资源（纹理、常量缓冲区等）
  - [ ] 跨平台兼容（OpenGL的统一缓冲对象、D3D12的描述符堆等）
- [ ] 实现绑定组/布局抽象

### 6. 渲染命令系统
- [ ] 创建渲染命令队列抽象
  - [ ] 支持命令记录和批处理
  - [ ] 跨平台渲染命令封装
- [ ] 实现自动资源障碍/状态管理

### 7. 渲染器架构
- [ ] 实现前向渲染器
- [ ] 实现延迟渲染器
- [ ] 支持多Pass渲染
- [ ] 实现渲染特性注册系统

## 优先级和实施顺序

### 短期（高优先级）
1. 实现基本的管线状态对象抽象（GraphicsPipeline）
2. 增强着色器系统，添加资源绑定抽象
3. 实现基本的材质系统

### 中期
1. 完善描述符/资源绑定系统
2. 实现渲染状态对象
3. 增强渲染命令系统

### 长期
1. 完善渲染器架构
2. 实现高级特性（阴影映射、后处理等）
3. 性能优化

## 注意事项
- 确保抽象层不影响性能
- 保持API简洁直观
- 与现有的引擎架构保持一致
- 考虑未来可能添加的其他渲染API（Vulkan、Metal等） 