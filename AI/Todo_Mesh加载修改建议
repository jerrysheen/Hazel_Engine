我当前的minputlayout是和mesh挂钩的， 但是其实我应该和shader挂钩。
mesh load 进来的时候，应该默认load所有数据？ 比如position， normal， uv， color。
这个时候如果没有color我应该怎么办？ 我是默认生成这个color，还是说根据shader是否需要再去生成？
正确的做法应该是shader反射以后得到我需要哪几个插槽，
然后将对应的input 传给pso，和传给mesh，
这样才符合我GraphicsPipeline的设计，我现在的问题就是我的具体数据就是在mesh加载的时候准备好的。
posiiton normal uv color吗？ 这样子的话就算shader不需要我都要预生成，是不是有点浪费？

# 解决方案建议

## 当前问题分析
根据代码分析，当前系统的问题是：
1. InputLayout与Mesh直接绑定，而非与Shader绑定
2. Mesh加载时会预生成所有顶点属性（position, normal, texcoord, color等），即使Shader不需要这些属性
3. 这导致内存浪费和不符合GraphicsPipeline设计理念

## 解决方案

### 1. 重构InputLayout与Shader的关系
将InputLayout与Shader关联，而不是与Mesh关联。Shader应该通过反射机制声明它需要哪些顶点属性。

### 2. 修改Mesh加载逻辑
Mesh应该只存储原始数据，而不预先生成固定格式的顶点缓冲区。具体实现可以：

```cpp
// Mesh.h修改建议
class Mesh
{
public:
    // 原始数据存储
    struct RawMeshData
    {
        std::vector<glm::vec3> Positions;  // 必须有
        std::vector<glm::vec3> Normals;    // 可选
        std::vector<glm::vec3> Tangents;   // 可选
        std::vector<glm::vec2> TexCoords0; // 可选
        std::vector<glm::vec2> TexCoords1; // 可选
        std::vector<glm::vec4> Colors;     // 可选
        std::vector<uint16_t> Indices;     // 索引
        
        // 标记数据是否存在
        bool HasNormals = false;
        bool HasTangents = false;
        bool HasTexCoords0 = false;
        bool HasTexCoords1 = false;
        bool HasColors = false;
    };
    
    // 存储原始数据
    RawMeshData m_RawData;
    
    // 根据shader要求创建顶点缓冲区
    Ref<VertexArray> CreateVertexArray(const Ref<Shader>& shader);
};
```

### 3. 实现Shader反射功能
添加或增强Shader反射功能，使其能够提供所需的顶点属性信息：

```cpp
// Shader.h修改建议
class Shader
{
public:
    // 获取输入布局
    const BufferLayout& GetInputLayout() const { return m_InputLayout; }
    
    // 着色器反射，分析着色器代码中使用的顶点属性
    void Reflect();

private:
    BufferLayout m_InputLayout;  // 存储着色器需要的顶点属性
};
```

### 4. 按需创建顶点缓冲区
在实际渲染时，根据Shader需要的属性动态创建顶点数据：

```cpp
// 使用示例
Ref<VertexArray> Mesh::CreateVertexArray(const Ref<Shader>& shader)
{
    Ref<VertexArray> vertexArray = VertexArray::Create();
    const BufferLayout& layout = shader->GetInputLayout();
    
    // 分析shader需要的顶点属性，创建对应的缓冲区
    std::vector<float> vertexData;
    uint32_t stride = 0;
    
    // 计算stride和缓冲区布局
    for (const auto& element : layout.GetElements())
    {
        stride += element.Size;
    }
    
    // 填充顶点数据
    for (size_t i = 0; i < m_RawData.Positions.size(); i++)
    {
        for (const auto& element : layout.GetElements())
        {
            if (element.Name == "POSITION")
            {
                vertexData.push_back(m_RawData.Positions[i].x);
                vertexData.push_back(m_RawData.Positions[i].y);
                vertexData.push_back(m_RawData.Positions[i].z);
            }
            else if (element.Name == "NORMAL" && m_RawData.HasNormals)
            {
                vertexData.push_back(m_RawData.Normals[i].x);
                vertexData.push_back(m_RawData.Normals[i].y);
                vertexData.push_back(m_RawData.Normals[i].z);
            }
            // 处理其他属性...
            else if (element.Name == "COLOR")
            {
                if (m_RawData.HasColors)
                {
                    vertexData.push_back(m_RawData.Colors[i].r);
                    vertexData.push_back(m_RawData.Colors[i].g);
                    vertexData.push_back(m_RawData.Colors[i].b);
                    vertexData.push_back(m_RawData.Colors[i].a);
                }
                else
                {
                    // 如果shader需要color但mesh没有，可以提供默认值
                    vertexData.push_back(1.0f); // r
                    vertexData.push_back(1.0f); // g
                    vertexData.push_back(1.0f); // b
                    vertexData.push_back(1.0f); // a
                }
            }
        }
    }
    
    // 创建并设置顶点缓冲区
    Ref<VertexBuffer> vertexBuffer = VertexBuffer::Create(
        vertexData.data(), 
        vertexData.size() * sizeof(float), 
        stride
    );
    
    vertexBuffer->SetLayout(layout);
    vertexArray->AddVertexBuffer(vertexBuffer);
    
    // 设置索引缓冲区
    Ref<IndexBuffer> indexBuffer = IndexBuffer::Create(
        m_RawData.Indices.data(), 
        m_RawData.Indices.size()
    );
    vertexArray->SetIndexBuffer(indexBuffer);
    
    return vertexArray;
}
```

### 5. 渲染流程修改
修改渲染流程，确保在使用Mesh前已经应用了正确的Shader：

```cpp
// 使用示例
void RenderObject(const Ref<Mesh>& mesh, const Ref<Shader>& shader)
{
    // 获取或创建该mesh与shader组合的顶点数组
    Ref<VertexArray> vertexArray = mesh->GetOrCreateVertexArray(shader);
    
    // 绑定着色器和顶点数组并绘制
    shader->Bind();
    vertexArray->Bind();
    RenderCommand::DrawIndexed(vertexArray);
}
```

### 6. 缓存优化
可以实现缓存机制，避免重复创建相同Shader需求的顶点缓冲区：

```cpp
// Mesh.h中添加
class Mesh
{
    // ...
    
    // 缓存不同shader对应的顶点数组
    std::unordered_map<uint64_t, Ref<VertexArray>> m_ShaderVertexArrays;
    
    // 获取或创建顶点数组
    Ref<VertexArray> GetOrCreateVertexArray(const Ref<Shader>& shader)
    {
        uint64_t shaderID = shader->GetUID();
        
        if (m_ShaderVertexArrays.find(shaderID) == m_ShaderVertexArrays.end())
        {
            m_ShaderVertexArrays[shaderID] = CreateVertexArray(shader);
        }
        
        return m_ShaderVertexArrays[shaderID];
    }
};
```

## 总结
通过以上修改，你的系统将能够：
1. 将InputLayout与Shader正确关联
2. 只生成Shader需要的顶点属性
3. 避免不必要的内存浪费
4. 符合GraphicsPipeline的设计理念
5. 提高渲染性能和内存效率

这样的重构会增加一些复杂性，但能更好地支持不同Shader和Mesh的组合，提高系统的灵活性和性能。
