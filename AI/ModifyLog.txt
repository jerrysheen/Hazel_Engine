日期: 2025年03月23日
Commit Hash: 待生成

# 提交信息

refactor(渲染系统): 移除Model类并实现新的材质系统

移除了Model.h和Model.cpp文件，废弃了旧的模型加载系统，代之以新的材质系统。
实现了MaterialProperty和Material类，支持不同类型的材质属性、序列化和材质实例管理。
更新了Shader类以支持更多的材质属性类型，并完善了与材质系统的集成。

- 添加MaterialPropertyType枚举和MaterialProperty类用于定义材质属性和值
- 实现Material类的核心功能，包括属性设置/获取、序列化和克隆
- 添加MaterialLibrary类用于管理材质实例
- 为Shader类添加SetFloat2方法及其在各渲染API后端的实现
- 更新Texture2D类，添加GetPath方法
- 调整EditorLayer和SceneViewLayer以适应新的材质系统

该提交完成了Todo列表中的"材质系统"阶段一的大部分任务。

日期: 2025年03月23日
Commit Hash: 待生成

# 提交信息

feat(D3D12): 完善着色器反射系统与顶点输入布局处理

实现D3D12着色器反射系统与顶点输入布局的完整集成，自动解析HLSL着色器的顶点属性需求。
移除了SceneViewLayer中的硬编码输入布局定义，替换为从着色器反射中自动获取。
修复了顶点属性输入槽位分配问题，优化了输入布局处理逻辑。

- 添加BufferLayout的向量构造函数，支持直接通过元素列表构造
- 修复D3D12ShaderReflection中未正确应用反射布局的问题
- 更改输入槽位分配策略，为每个顶点属性使用独立槽位
- 重命名mInputLayout为m_D3D12InputLayout以符合命名规范
- 添加GetD3D12InputLayout()方法暴露输入布局定义
- 清理冗余代码注释和未使用变量

该提交完成了Todo列表中的"修改Shader，增加反射，关联inputlayout"任务。

日期: 2025年03月18日
Commit Hash: 待生成

# 提交信息

feat(Renderer): 实现GraphicsPipeline组件

添加GraphicsPipeline组件实现，作为RHI架构的核心部分，提供跨平台的渲染管线状态管理。
这是从架构设计阶段到实际代码实现的第一步，完成了管线状态对象的抽象定义。

- 定义GraphicsPipeline基类及工厂方法，支持多种渲染API
- 实现各种渲染状态配置（混合、深度测试、光栅化等）
- 添加丰富的枚举类型定义渲染管线配置选项
- 为OpenGL和DirectX12后端提供基础实现框架
- 与现有的Shader和Buffer系统集成

日期: 2025年03月12日
Commit Hash: 待生成

# 提交信息

docs(RHI): 更新RHI架构设计文档并优化图表表示

更新渲染硬件接口(RHI)架构设计文档，扩展管线系统组件设计说明，
重新设计架构图布局和连线方式，提高文档可读性和系统清晰度。
新增Mesh系统、Shader系统和材质系统等模块的设计文档关联。

- 添加GraphicsPipeline、RootSignature等组件的详细设计说明
- 重新定义Shader系统与管线系统的关系，将Shader移至外部引用
- 将架构图从左右布局优化为自上而下的流程图
- 使用不同线型（实线/虚线）区分主要关系和次要关系
- 增加InputLayout组件及其与Shader反射系统的关联
- 新增连线优化说明部分，提高文档可维护性

日期: 2025年03月10日
Commit Hash: 待生成

# 提交信息

docs(Renderer): 更新渲染系统设计为RHI架构并清理代码

重新定义渲染系统设计为渲染硬件接口(RHI)架构，为跨平台支持奠定基础。
完善了实现计划、优先级和各组件职责说明，新增上层渲染系统设计。
移除SceneViewLayer.cpp中冗余的Fence创建代码以简化初始化流程。

- 将"渲染API抽象计划"更新为"渲染硬件接口(RHI)实现计划"
- 细化核心抽象接口、命令系统和图形管线系统的实现计划
- 新增RenderContext概念说明及其与PSO的区别
- 定义了清晰的三阶段实施路线图和设计原则
- 精简SceneViewLayer.cpp中的Fence初始化代码

日期: 2025年03月08日
Commit Hash: b3bdca671dac0efa3f02f6260421188b1bd326c4

# 提交信息

refactor(Renderer): 重构顶点属性系统支持语义索引

增加BufferElement的CoordIndex字段用于支持带索引的语义（如TEXCOORD0、TEXCOORD1）。
移除了SceneViewLayer中硬编码的输入布局，改为从网格顶点数组中获取。
修改相关构造函数和方法支持新的协调索引字段。

- 在Buffer.h中添加CoordIndex字段及更新构造函数
- 在D3D12VertexArray中使用元素的CoordIndex
- 在D3D12VertexArray中添加GetInputLayout()方法
- 修改Mesh.cpp中的布局定义包含协调索引
- 重构SceneViewLayer使用顶点数组的输入布局而非硬编码布局 