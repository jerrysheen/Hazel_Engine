# 哈泽尔引擎渲染硬件接口（RHI）实现计划

## 现状分析
目前的SceneViewLayer.cpp直接使用了大量D3D12特定的API，包括：
- 直接创建和使用D3D12管线状态对象（PSO）
- 硬编码的着色器字节码处理
- 显式的D3D12资源绑定（如描述符堆、根签名等）
- 渲染状态设置（光栅化状态、混合状态等）

已经有一些抽象实现：
- 部分渲染API管理器（RenderAPIManager）
- 基本的Buffer抽象（VertexBuffer、IndexBuffer、ConstantBuffer）
- Mesh加载系统
- RenderTarget/TextureBuffer抽象
- 基本的CommandList抽象

## RHI层实现计划

### 1. 核心抽象接口 (高优先级)
- [ ] 创建`RenderAPI`抽象基类
  - [ ] 定义渲染系统入口点和核心接口
  - [ ] 实现平台特定派生类：`D3D12RenderAPI`
- [ ] 创建`GraphicsDevice`抽象基类
  - [ ] 封装物理GPU设备和能力查询
  - [ ] 实现`D3D12Device`具体类

### 2. 命令系统 (高优先级)
- [x] 创建`CommandList`抽象基类
  - [x] 记录渲染命令
  - [x] 实现`D3D12CommandList`具体类
- [ ] 创建`CommandQueue`抽象基类
  - [ ] 管理命令执行顺序和优先级
  - [ ] 实现`D3D12CommandQueue`具体类
- [ ] 创建`Fence`抽象基类
  - [ ] 处理GPU-CPU同步
  - [ ] 实现`D3D12Fence`具体类

### 3. 图形管线系统 (高优先级)
- [ ] 创建`GraphicsPipeline`抽象基类
  - [ ] 封装完整的渲染状态
  - [ ] 封装光栅化状态
  - [ ] 封装混合状态
  - [ ] 封装深度/模板状态
  - [ ] 封装输入布局
  - [ ] 封装拓扑类型
  - [ ] 实现`D3D12GraphicsPipeline`具体类
- [ ] 创建`RootSignature`/描述符布局抽象基类
  - [ ] 定义资源绑定布局
  - [ ] 实现`D3D12RootSignature`具体类
- [ ] 增强`Shader`抽象基类
  - [ ] 管理着色器程序和编译
  - [ ] 添加编译缓存系统
  - [ ] 实现着色器变体和宏支持
  - [ ] 统一的反射系统

### 4. 资源管理系统 (中优先级)
- [ ] 完善`Buffer`抽象体系
  - [ ] 增强`VertexBuffer`、`IndexBuffer`
  - [ ] 实现`UniformBuffer`/`ConstantBuffer`
- [ ] 创建`Texture`抽象基类
  - [ ] 实现`Texture2D`、`TextureCube`
  - [ ] 增强`RenderTarget`
- [ ] 创建描述符/采样器抽象
  - [ ] 实现`D3D12DescriptorHeap`

### 5. 渲染状态对象 (中优先级)
- [ ] 创建`RenderState`抽象
  - [ ] 封装混合状态
  - [ ] 封装深度/模板状态
  - [ ] 封装光栅化状态
- [ ] 实现预设状态（透明、不透明等）

### 6. 渲染上下文 (中优先级)
- [ ] 创建`RenderContext`抽象
  - [ ] 封装当前渲染环境状态
  - [ ] 管理当前绑定的资源
  - [ ] 提供渲染状态切换接口
  - [ ] 实现`D3D12RenderContext`具体类

### 7. 交换链和窗口系统 (低优先级)
- [ ] 增强`SwapChain`抽象
  - [ ] 管理呈现表面
  - [ ] 处理帧缓冲交换
  - [ ] 实现`D3D12SwapChain`具体类

## 上层渲染系统（待RHI层实现后进行）

### 1. 相机系统
- [ ] 实现`Camera`基类
  - [ ] 创建透视和正交相机
  - [ ] 视图和投影矩阵管理
- [ ] 实现`CameraComponent`
  - [ ] 与ECS集成
  - [ ] 支持相机控制器

### 2. 渲染器架构
- [ ] 实现`CameraRenderer`
  - [ ] 与相机组件集成
  - [ ] 渲染队列管理
  - [ ] 视锥体剔除
- [ ] 实现`RenderQueue`系统
  - [ ] 对象排序（前到后/后到前）
  - [ ] 透明物体处理
  - [ ] 批处理优化

### 3. 渲染特性系统
- [ ] 实现`RenderFeature`基类
  - [ ] 执行顺序管理
  - [ ] 渲染特性注册和启用/禁用
- [ ] 实现标准渲染特性
  - [ ] `OpaqueRenderFeature`
  - [ ] `SkyboxRenderFeature`
  - [ ] `TransparentRenderFeature`
- [ ] 实现编辑器特定渲染特性
  - [ ] `GridRenderFeature`
  - [ ] `GizmoRenderFeature`

### 4. 材质系统
- [ ] 实现`Material`系统
  - [ ] 属性映射
  - [ ] 着色器集成
  - [ ] 材质参数更新
- [ ] 实现`MaterialComponent`
  - [ ] 与ECS集成
  - [ ] 材质实例化

### 5. 后处理系统
- [ ] 实现`PostProcessStack`
  - [ ] 后处理效果管理
  - [ ] 渲染目标管理
- [ ] 实现基础后处理效果
  - [ ] `BloomEffect`
  - [ ] `TonemappingEffect`

## 关于RenderContext的说明

RenderContext是渲染系统中的一个重要概念，它不同于PSO（管线状态对象）。RenderContext代表当前渲染的上下文环境，负责：

1. 管理当前绑定的资源（纹理、缓冲区等）
2. 跟踪当前渲染目标和视口设置
3. 提供渲染状态切换的高级接口
4. 封装渲染命令的执行环境

简而言之，RenderContext是渲染命令执行的环境，而PSO则是定义了渲染管线的配置。RenderContext会使用PSO，但它们是不同的概念。

## 实施顺序和优先级

### 第一阶段 (短期)
1. 完成核心抽象接口（RenderAPI、GraphicsDevice）
2. 完善命令系统（CommandQueue、Fence）
3. 实现图形管线抽象（GraphicsPipeline、RootSignature）

### 第二阶段 (中期)
1. 增强着色器系统
2. 完善资源管理系统
3. 实现渲染状态对象
4. 创建RenderContext抽象

### 第三阶段 (长期)
1. 实现交换链和窗口系统
2. 上层渲染系统开发
3. 优化性能和内存管理

## 设计原则
- 清晰的抽象与实现分离
- 单一职责原则
- 良好的资源生命周期管理
- 支持平台特定访问但保持核心接口跨平台
- 考虑性能优化和状态缓存 