# 材质批量绘制策略

## 1. 整体架构设计

### 基本原则
- 预分配大型ConstantBuffer，而非每帧动态创建
- 同材质的对象进行批处理，共享shader状态
- 维护材质数据在大缓冲区中的偏移量
- 使用描述符表+根常量方式进行高效绘制

### 批处理流程
1. 收集同材质对象
2. 按材质进行排序分组
3. 更新材质数据到预分配的大ConstantBuffer
4. 记录每个材质对应的CBV偏移
5. 批量提交绘制命令

## 2. 大型ConstantBuffer设计

### 预分配策略
- 初始化时预分配足够大的上传缓冲区
- 采用环形缓冲或多缓冲设计(通常2-3帧)
- 材质数据需要256字节对齐(DirectX12要求)

```cpp
// 伪代码：预分配环形缓冲区
struct FrameResources {
    ComPtr<ID3D12Resource> uploadBuffer;
    void* mappedData;
    uint32_t currentOffset;
};

// 3帧环形缓冲
std::array<FrameResources, 3> frameResources;
```

### 内存管理
- 计算对齐后的材质数据大小: `(sizeof(MaterialData) + 255) & ~255`
- 在大缓冲区内为每个材质分配连续空间
- 记录每个材质的偏移量
- 在帧结束时重置偏移计数器

## 3. CBV描述符管理

### 创建CBV描述符
```cpp
// 为材质在上传缓冲区中的子区域创建CBV
D3D12_CONSTANT_BUFFER_VIEW_DESC cbvDesc = {};
cbvDesc.BufferLocation = uploadBuffer->GetGPUVirtualAddress() + materialOffset;
cbvDesc.SizeInBytes = alignedMaterialDataSize;
device->CreateConstantBufferView(&cbvDesc, descriptorHeapHandle + descriptorIndex);
```

### 描述符表设计
- 创建足够大的CBV/SRV/UAV描述符堆
- 为每个材质在描述符堆中分配位置
- 将CBV描述符写入对应位置
- 记录每个材质的描述符索引

## 4. 批量绘制实现方案

### 方案1: 描述符表索引
最优方案，设置一次根签名，每次绘制只更新描述符表偏移：

```cpp
// 设置一次根签名
commandList->SetGraphicsRootSignature(rootSignature);

// 设置共享状态(顶点缓冲区等)
commandList->IASetVertexBuffers(0, 1, &vertexBufferView);
commandList->IASetIndexBuffer(&indexBufferView);
commandList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

// 按批次绘制
for (auto& batch : materialBatches) {
    // 只更新描述符表句柄偏移，不需要重新绑定根签名
    commandList->SetGraphicsRootDescriptorTable(
        0, // 根参数索引 
        CD3DX12_GPU_DESCRIPTOR_HANDLE(
            descriptorHeap->GetGPUDescriptorHandleForHeapStart(),
            batch.descriptorIndex,
            descriptorHandleIncrementSize
        )
    );
    
    // 绘制该批次的所有对象
    commandList->DrawIndexedInstanced(
        batch.indexCount, 
        batch.instanceCount, 
        batch.startIndexLocation, 
        batch.baseVertexLocation, 
        batch.startInstanceLocation
    );
}
```

### 方案2: 索引绑定(空间寻址)
适用于支持空间索引的Shader:

```hlsl
// HLSL中定义材质数组
ConstantBuffer<MaterialData> g_Materials[] : register(b0, space1);

// 在shader中使用索引访问
float4 color = g_Materials[materialIndex].diffuseColor;
```

```cpp
// 设置材质索引作为根常量
commandList->SetGraphicsRoot32BitConstant(1, batch.materialIndex, 0);
```

## 5. 大型场景优化策略

### 材质实例化与合并
- 使用材质实例系统共享基础材质参数，只存储变化的参数
- 识别并合并相似材质，减少不必要的状态切换
- 对频繁使用的材质进行缓存优化

### 视距级别优化(LOD)
- 远处物体使用简化材质，减少参数量
- 实现材质LOD系统，根据距离动态调整材质复杂度
- 远处对象可共享同一材质实例，进一步减少材质数量

### 数据分层存储
- 按更新频率将材质参数分组：
  - 静态数据：几乎不变的参数(如基础颜色、法线贴图等)
  - 每帧更新：随时间变化的参数(如动画纹理坐标)
  - 偶尔更新：在特定事件触发时更新(如状态改变)
- 静态数据可长时间驻留在GPU内存中，减少传输开销

## 6. 材质批量管理器实现

### MaterialBatchManager类设计
```cpp
// 材质批次信息结构
struct MaterialBatchInfo {
    uint32_t descriptorIndex;    // 材质在描述符堆中的索引
    uint32_t bufferOffset;       // 材质在大缓冲区中的偏移
    uint32_t dataSize;           // 材质数据大小(对齐后)
};

// 材质批量管理器
class MaterialBatchManager {
public:
    static MaterialBatchManager& Get();
    
    // 初始化大型常量缓冲区和描述符堆
    void Initialize(uint32_t maxMaterials = 1024, uint32_t maxMaterialSize = 256);
    
    // 在每帧开始时准备材质数据缓冲区
    void BeginFrame();
    
    // 注册材质并获取批次信息
    MaterialBatchInfo RegisterMaterial(const Ref<Material>& material);
    
    // 上传材质数据到当前帧缓冲区
    void UploadMaterialData(const MaterialBatchInfo& batchInfo, const void* data, uint32_t size);
    
    // 设置特定批次的材质状态
    void SetMaterialBatch(const MaterialBatchInfo& batchInfo, CommandList* cmdList);
    
    // 在每帧结束时重置内部状态
    void EndFrame();
    
private:
    // 帧资源结构
    struct FrameResources {
        Ref<ConstantBuffer> materialBuffer;  // 大型上传缓冲区
        uint32_t currentOffset;              // 当前分配偏移
        void* mappedData;                    // 映射的CPU内存地址
    };
    
    std::array<FrameResources, 3> m_FrameResources;
    uint32_t m_CurrentFrame = 0;
    
    // 描述符堆管理
    Ref<DescriptorHeap> m_CBVDescriptorHeap;
    uint32_t m_DescriptorSize = 0;
    
    // 材质批次映射(材质ID到批次信息的映射)
    std::unordered_map<uint64_t, MaterialBatchInfo> m_MaterialBatches;
    
    // 批次缓存和状态
    std::vector<MaterialBatchInfo> m_ActiveBatches;
};
```

### 材质类扩展
```cpp
class Material {
public:
    // 获取材质批次信息(供批处理系统使用)
    MaterialBatchInfo GetBatchInfo() const;
    
    // 上传材质数据到指定偏移的大型常量缓冲区
    void UploadToBuffer(void* destBuffer, uint32_t offset);
    
    // 计算此材质需要的内存大小(包含对齐)
    uint32_t GetAlignedDataSize() const;
    
    // 获取材质的唯一ID(用于批处理映射)
    uint64_t GetMaterialID() const { return m_UUID; }
    
    // 判断材质是否需要更新
    bool NeedsUpdate() const;
    
    // 标记材质已更新
    void MarkUpdated();
    
private:
    // 批处理相关信息
    mutable MaterialBatchInfo m_BatchInfo;
    bool m_NeedsUpdate = true;
};
```

## 7. 渲染循环集成

### 场景渲染器实现
```cpp
void SceneRenderer::Render(Scene* scene, Camera* camera)
{
    // 准备批处理管理器
    auto& batchManager = MaterialBatchManager::Get();
    batchManager.BeginFrame();
    
    // 剔除和收集可见对象
    std::vector<RenderItem> visibleItems = CullVisibleObjects(scene, camera);
    
    // 按材质ID排序(便于批处理)
    std::sort(visibleItems.begin(), visibleItems.end(), 
              [](const RenderItem& a, const RenderItem& b) {
                  return a.Material->GetMaterialID() < b.Material->GetMaterialID();
              });
    
    // 准备渲染状态
    CommandList* cmdList = CommandQueue::Get().GetCommandList();
    cmdList->SetPipelineState(m_DefaultPipeline);
    cmdList->SetRootSignature(m_RootSignature);
    
    // 设置共享状态(视口、裁剪矩形等)
    SetupSharedRenderState(cmdList, camera);
    
    // 按批次绘制
    Ref<Material> currentMaterial = nullptr;
    MaterialBatchInfo currentBatch;
    
    for (const auto& item : visibleItems)
    {
        // 当材质变化时更新批次
        if (currentMaterial != item.Material || currentMaterial->NeedsUpdate())
        {
            currentMaterial = item.Material;
            currentBatch = batchManager.RegisterMaterial(currentMaterial);
            
            // 上传材质数据到批处理缓冲区
            currentMaterial->UploadToBuffer(batchManager.GetCurrentBufferAddress(), currentBatch.bufferOffset);
            
            // 设置材质批次状态(描述符表等)
            batchManager.SetMaterialBatch(currentBatch, cmdList);
            
            // 标记材质已更新
            currentMaterial->MarkUpdated();
        }
        
        // 设置特定于对象的常量(如变换矩阵)
        SetObjectConstants(cmdList, item);
        
        // 绘制当前对象
        DrawMesh(cmdList, item.Mesh);
    }
    
    // 完成批处理
    batchManager.EndFrame();
}
```

## 8. 对照Unity和UE的实现比较

### Unity材质系统
- Unity使用MaterialPropertyBlock提供实例化覆盖
- 材质变体系统优化Shader变种
- 静态批处理和GPU实例化减少绘制调用
- SRP Batcher优化材质批处理，减少CPU开销

### UE材质系统
- 材质实例系统允许共享基础材质参数
- 材质表达式图减少Shader变体数量
- 自动材质合并减少渲染状态切换
- 虚拟材质平铺处理大型景观

### 我们的实现优势
- 更灵活的批处理设计(可根据项目需求调整)
- 更精细的控制(按帧、按材质类型优化)
- 更强的可扩展性(易于集成新特性)
- 减少显存占用(共享常量缓冲区)
